#!/usr/bin/env ruby

input = ARGV # ARGV holds the command line arguments that were passed in
NO_NAME = "I'd cheer for you, if only I knew who you were :("
NO_BDAY = "I would wish you a Happy Birthday, if I knew when that was!"
NO_NAME_OR_BDAY =  <<EOS
I'd cheer for you, if only I knew who you were :(
I would wish you a Happy Birthday, if I knew when that was!
EOS

class Guard
  attr_accessor :name
  attr_accessor :bday
  attr_accessor :input
  attr_accessor :parsed_input

  def initialize(input)
    @name = input[0]
    @bday = input[1]
    @input = input
    @parsed_input = input[0][/[a-zA-Z]*(-)?[a-zA-Z]*/] unless input[0].nil?
  end

  def input_is_empty?
    true if @input.size == 0 && @input.empty?
  end

  def first_input_has_numbers_and_no_second_arg?
    true if !!/\d/.match(@input[0]) && @input[1].nil?
  end

  def first_input_has_spaces_and_no_second_arg?
    true if !!/\s/.match(@input[0]) && @input[1].nil?
  end

  def first_and_second_input_have_non_word_or_number_characters?
    true if !!/\W/.match(@input[0]) && !!/\W/.match(@input[1])
  end

  def input_has_an_empty_string?
    true if @input.size == 1 && @input[0].empty?
  end

  def input_has_two_invalid_args?
    true if (!/\w+/.match(@input[0]) && !/\w+(-)\w+/.match(@input[0])) && !/\d{2}(\/)\d{2}/.match(@input[1])
  end

  def input_has_invalid_date?
    true if !/\d{2}(\/)\d{2}/.match(@input[1])
  end

  def input_and_parsed_input_are_equal_and_input_size_is_one?
    true if (@input[0].size == @parsed_input.size) && (@input.size == 1)
  end

  def input_has_two_valid_args?
    true if @input.size == 2
  end
end

class Say_Cheers
  attr_accessor :name
  attr_accessor :bday

  def initialize(input)
    @name = input[0]
    @bday = input[1]
    @input_caps = input[0].upcase unless input[0].nil?
  end

  def name
    @input_caps.each_char { |x|
      if !!/A|E|I|O|U/.match(x)
        puts "Give me an... #{x}"
      elsif !!/-/.match(x)
        #if name has dash, don't print the dash in the cheer
      else
        puts "Give me a... #{x}"
      end
    }
    puts "#{@input_caps}'s just GRAND!"
  end
end

class Say_Birthday
  require 'date'
  attr_accessor :bday

  def initialize(input)
    @input = input unless input[1].nil?
  end

  def is_valid?
    true if !!/\d{2}(\/)\d{2}/.match(@input[1])
  end

  def count_down(input)
    today = Date.today
    bday = Date.parse(input[1])
    year = bday.year
    month = bday.month
    day = bday.mday
    parsed_date = Date.valid_date?(year,month,day)
    if parsed_date == true
      relational = today - bday
      relational_arr = relational.to_s.split('/')
      #difference = relational.to_s.split('/').chomp
      difference = relational_arr[0]
      if !!/(-)/.match(difference)
        days_till = difference.to_i.abs
        puts "\nAwesome! Your birthday is in #{days_till} days! Happy Birthday in advance!"
        exit
      end
      bday_next_year = 365 - difference.to_i.abs
      print "\nAwesome! Your birthday is in #{bday_next_year} days! Happy birthday in advance!"
      exit
    end
  end
end

guard = Guard.new(input)
cheer = Say_Cheers.new(input)
birthday = Say_Birthday.new(input)

if guard.input_is_empty? ||
    guard.first_input_has_numbers_and_no_second_arg? ||
    guard.first_input_has_spaces_and_no_second_arg? ||
    guard.input_has_an_empty_string?
  print NO_NAME
  exit
end

if guard.first_and_second_input_have_non_word_or_number_characters? ||
    guard.input_has_two_invalid_args? && input.size == 2
  print NO_NAME_OR_BDAY
  exit
end

if guard.input_has_invalid_date? && input.size == 2
  print NO_BDAY
  exit
end

if guard.input_and_parsed_input_are_equal_and_input_size_is_one?
  cheer.name
  exit
end

if guard.input_has_two_valid_args?
  cheer.name
  if birthday.is_valid?
    birthday.count_down(input)
  end
  exit
end


